View(fuera_rango_nse1)
fuera_rango_nse1 = subset(base$INSE, !(base$INSE >0 && base$INSE < 41.109 ))
fuera_rango_nse1 = subset(base$INSE, !(base$INSE >0 & base$INSE < 41.109 ) & base$NSE == "NSE 1")
fuera_rango_nse1 = subset(base$INSE, !(base$INSE >0 & base$INSE < 41.109 ) & base$NSE == "NSE1")
fuera_rango_nse1 = subset(base, !(base$INSE >0 & base$INSE < 41.109 ) & base$NSE == "NSE1")
View(fuera_rango_nse1)
View(fuera_rango_nse1)
count(subset(base, !(base$INSE >0 & base$INSE <= 41.109 ) & base$NSE == "NSE1"))
count(subset(base, !(base$INSE >0 & base$INSE <= 41.109 ) & base$NSE == "NSE1"))
count(subset(base, !(base$INSE >41.109 & base$INSE <= 51.176 ) & base$NSE == "NSE2"))
count(subset(base, !(base$INSE >51.176 & base$INSE <= 64.084 ) & base$NSE == "NSE3"))
count(subset(base, !(base$INSE >64.084 & base$INSE <= 100 ) & base$NSE == "NSE4"))
peso1 = count(subset(base, !(base$INSE >0 & base$INSE <= 41.109 ) & base$NSE == "NSE1"))
peso2 = count(subset(base, !(base$INSE >41.109 & base$INSE <= 51.176 ) & base$NSE == "NSE2"))
peso3 = count(subset(base, !(base$INSE >51.176 & base$INSE <= 64.084 ) & base$NSE == "NSE3"))
peso4 = count(subset(base, !(base$INSE >64.084 & base$INSE <= 100 ) & base$NSE == "NSE4"))
nse = c("NSE1", "NSE2", "NSE3", "NSE4")
peso = c(peso1, peso2, peso3, peso4)
inconsistentes = data.frame(nse=nse, peso=peso)
names(inconsistentes)
inconsistentes
peso = c()
inconsistentes
inconsistentes = data.frame(nse=nse, peso=peso)
inconsistentes = data.frame(nse=nse)
inconsistentes
View(peso1)
inconsistentes = data.frame(nse=nse, "peso" = c(peso1, peso2, peso3, peso4))
View(inconsistentes)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(reshape2)
library(dplyr)
library(e1071)
library(Hmisc)
library(inspectdf) #este no lo tienen
library(funModeling) #este no lo tienen
library(VIM) #este no lo tienen
library(stringr)
library(xtable) #este no lo tienen
library(ggplot2)
library(directlabels)
library(scales)
library(ggthemes)
library(mice)
library(BBmisc)
# Cargue de la base de datos
SABERTYT20162 <- read_delim("SABERTYT20162.csv",
delim = ";", escape_double = FALSE, col_types = cols(ESTU_LIMITA_MOTRIZ = col_character(),
ESTU_LIMITA_INVIDENTE = col_character(),
ESTU_LIMITA_CONDICIONESPECIAL = col_character(),
ESTU_LIMITA_SORDO = col_character(),
ESTU_LIMITA_AUTISMO = col_character()),
locale = locale(decimal_mark = ",",
encoding = "ISO-8859-1"),
trim_ws = TRUE)
View(SABERTYT20162)
base <- SABERTYT20162
#Eliminación de columnas innecesarias
base = base[, -c(16:84)]
#Filtrar por estudiantes colombianos
base = base[base$ESTU_NACIONALIDAD == "1 COLOMBIA",]
#Filtrar por estudiantes listos para ser publicados
base = base[base$ESTU_ESTADO == "PUBLICAR",]
descriptivas<- function(x){data.frame("MEDIDA"=c("Observaciones", "Mínimo", "1er Q", "Media", "Mediana", "Desv Est", "3er Q", "Máximo", "Asimetría", "Curtosis", "atípico leve<", "atípico leve>","atípico extremo<","atípico extremo>", "Err Est Media", "IC(95%) Media Up", "IC(95%) Media Down"),"VALOR"=format(c(length(na.omit(x)), min(na.omit(x)), quantile(na.omit(x), prob=0.25), mean(na.omit(x)), median(na.omit(x)), sd(na.omit(x)), quantile(na.omit(x), prob=0.75), max(na.omit(x)), skewness(na.omit(x)), kurtosis(na.omit(x)), (2.5*quantile(na.omit(x),prob=0.25)-1.5*quantile(na.omit(x), prob=0.75)),(2.5*quantile(na.omit(x),prob=0.75)-1.5*quantile(na.omit(x), prob=0.25)),(4*quantile(na.omit(x),prob=0.25)-3*quantile(na.omit(x), prob=0.75)),(4*quantile(na.omit(x),prob=0.75)-3*quantile(na.omit(x), prob=0.25)), ((sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))+1.96*(sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))-1.96*((sd(na.omit(x))/sqrt(length(na.omit(x))))))), scientific = F))}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS
descriptivas2<-function(Continua,Categorías){
x1=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){length(na.omit(x))})
names(x1)=c("Categoría","Obs")
x2=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){min(na.omit(x))})
names(x2)=c("Categoría","Mínimo")
x3=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.25)})
names(x3)=c("Categoría","1er Q")
x4=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){median(na.omit(x))})
names(x4)=c("Categoría","Mediana")
x5=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){mean(na.omit(x))})
names(x5)=c("Categoría","Media")
x6=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.75)})
names(x6)=c("Categoría","3er Q")
x7=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){max(na.omit(x))})
names(x7)=c("Categoría","Máximo")
x8=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){sd(na.omit(x))})
names(x8)=c("Categoría","Desv Est")
x9=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){skewness(na.omit(x))})
names(x9)=c("Categoría","Asimetría")
x10=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){kurtosis(na.omit(x))})
names(x10)=c("Categoría","Curtosis")
cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)[,-seq(3,19,2)]
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS EN SUBMUESTRAS
tabla_freq<- function(x,total=1,na="ifany"){
if (total==1) {
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",sum(M$`Freq. Abs.`),sum(M$`Freq. Rel.`))
M$`Freq. Rel.`=as.numeric(M$`Freq. Rel.`)
M$`Freq. Abs.`=as.numeric(M$`Freq. Abs.`)
M
} else{
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M
}
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VAR DISCRETAS
tabla_freq2<-function(x,y,na="ifany",prop=0, suma=c("filas","col")){
if (prop==0) {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
M
} else if (prop==1 & suma=="filas") {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 2:ncol(M)) {
M[,i]=M[,i]/M[,ncol(M)]
}
M
} else {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 1:nrow(M)) {
M[i,2:ncol(M)]=M[i,2:ncol(M)]/M[nrow(M),2:ncol(M)]
}
M
}
}
inconsistentes = data.frame(nse=nse)
View(inconsistentes)
View(inconsistentes)
for (i in 0:2){
inconsistentes[,i]= "hola"
}
inconsistentes = data.frame(nse=nse, peso=peso)
peso = c(0,0,0,0)
data.frame
inconsistentes = data.frame(nse=nse, peso=peso)
for (i in 0:2){
inconsistentes[,i]= "hola"
}
peso = c(0,0,0,0)
inconsistentes = data.frame(nse=nse, peso=peso)
for (i in 0:4){
inconsistentes[i,]= "hola"
}
inconsistentes = data.frame(nse=nse, peso=peso)
for (i in 0:4){
inconsistentes[i,1]= "hola"
}
inconsistentes = data.frame(nse=nse, peso=peso)
for (i in 0:4){
inconsistentes[i,2]= "hola"
}
pesos = c(peso1, peso2, peso3, peso4)
inconsistentes[i,2]= pesos[i]
pesos[0]
pesos[1]
pesos[2]
pesos[3]
pesos[4]
inconsistentes[i,2]= pesos[i-1]
inconsistentes[i-1,2]= pesos[i-1]
inconsistentes[1,2]
inconsistentes[1,2]= pesos[i]
inconsistentes[1,2]= pesos[1]
inconsistentes[1,2]= pesos[0]
inconsistentes[1,2]= pesos[2]
inconsistentes[i,2]= pesos[i-1]
for (i in 1:4){
inconsistentes[i,2]= pesos[i-1]
}
inconsistentes = data.frame(nse=nse, peso=peso)
for (i in 1:4){
inconsistentes[i,2]= pesos[i]
}
hist(inconsistentes)
hist(inconsistentes$peso)
hist(inconsistentes$nse)
hist(inconsistentes)
tabla_freq(inconsistentes)
tabla_freq2(inconsistentes)
tabla_freq2(inconsistentes$nse, inconsistentes$peso)
descriptivas2(inconsistentes$nse, inconsistentes$peso)
inconsistentes
```{r echo=FALSE,out.width='80%',fig.align='center',fig.pos='H'}
htmlTable(inconsistentes)
install.packages("htmlTable")
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(reshape2)
library(dplyr)
library(e1071)
library(Hmisc)
library(inspectdf) #este no lo tienen
library(funModeling) #este no lo tienen
library(VIM) #este no lo tienen
library(stringr)
library(xtable) #este no lo tienen
library(ggplot2)
library(directlabels)
library(scales)
library(ggthemes)
library(mice)
library(BBmisc)
# Cargue de la base de datos
SABERTYT20162 <- read_delim("SABERTYT20162.csv",
delim = ";", escape_double = FALSE, col_types = cols(ESTU_LIMITA_MOTRIZ = col_character(),
ESTU_LIMITA_INVIDENTE = col_character(),
ESTU_LIMITA_CONDICIONESPECIAL = col_character(),
ESTU_LIMITA_SORDO = col_character(),
ESTU_LIMITA_AUTISMO = col_character()),
locale = locale(decimal_mark = ",",
encoding = "ISO-8859-1"),
trim_ws = TRUE)
View(SABERTYT20162)
base <- SABERTYT20162
#Eliminación de columnas innecesarias
base = base[, -c(16:84)]
#Filtrar por estudiantes colombianos
base = base[base$ESTU_NACIONALIDAD == "1 COLOMBIA",]
#Filtrar por estudiantes listos para ser publicados
base = base[base$ESTU_ESTADO == "PUBLICAR",]
descriptivas<- function(x){data.frame("MEDIDA"=c("Observaciones", "Mínimo", "1er Q", "Media", "Mediana", "Desv Est", "3er Q", "Máximo", "Asimetría", "Curtosis", "atípico leve<", "atípico leve>","atípico extremo<","atípico extremo>", "Err Est Media", "IC(95%) Media Up", "IC(95%) Media Down"),"VALOR"=format(c(length(na.omit(x)), min(na.omit(x)), quantile(na.omit(x), prob=0.25), mean(na.omit(x)), median(na.omit(x)), sd(na.omit(x)), quantile(na.omit(x), prob=0.75), max(na.omit(x)), skewness(na.omit(x)), kurtosis(na.omit(x)), (2.5*quantile(na.omit(x),prob=0.25)-1.5*quantile(na.omit(x), prob=0.75)),(2.5*quantile(na.omit(x),prob=0.75)-1.5*quantile(na.omit(x), prob=0.25)),(4*quantile(na.omit(x),prob=0.25)-3*quantile(na.omit(x), prob=0.75)),(4*quantile(na.omit(x),prob=0.75)-3*quantile(na.omit(x), prob=0.25)), ((sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))+1.96*(sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))-1.96*((sd(na.omit(x))/sqrt(length(na.omit(x))))))), scientific = F))}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS
descriptivas2<-function(Continua,Categorías){
x1=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){length(na.omit(x))})
names(x1)=c("Categoría","Obs")
x2=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){min(na.omit(x))})
names(x2)=c("Categoría","Mínimo")
x3=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.25)})
names(x3)=c("Categoría","1er Q")
x4=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){median(na.omit(x))})
names(x4)=c("Categoría","Mediana")
x5=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){mean(na.omit(x))})
names(x5)=c("Categoría","Media")
x6=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.75)})
names(x6)=c("Categoría","3er Q")
x7=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){max(na.omit(x))})
names(x7)=c("Categoría","Máximo")
x8=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){sd(na.omit(x))})
names(x8)=c("Categoría","Desv Est")
x9=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){skewness(na.omit(x))})
names(x9)=c("Categoría","Asimetría")
x10=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){kurtosis(na.omit(x))})
names(x10)=c("Categoría","Curtosis")
cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)[,-seq(3,19,2)]
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS EN SUBMUESTRAS
tabla_freq<- function(x,total=1,na="ifany"){
if (total==1) {
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",sum(M$`Freq. Abs.`),sum(M$`Freq. Rel.`))
M$`Freq. Rel.`=as.numeric(M$`Freq. Rel.`)
M$`Freq. Abs.`=as.numeric(M$`Freq. Abs.`)
M
} else{
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M
}
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VAR DISCRETAS
tabla_freq2<-function(x,y,na="ifany",prop=0, suma=c("filas","col")){
if (prop==0) {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
M
} else if (prop==1 & suma=="filas") {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 2:ncol(M)) {
M[,i]=M[,i]/M[,ncol(M)]
}
M
} else {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 1:nrow(M)) {
M[i,2:ncol(M)]=M[i,2:ncol(M)]/M[nrow(M),2:ncol(M)]
}
M
}
}
library(htmlTable)
htmlTable(inconsistentes)
View(base)
View(base)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(reshape2)
library(dplyr)
library(e1071)
library(Hmisc)
library(inspectdf)
library(funModeling)
library(VIM)
library(stringr)
library(xtable)
library(ggplot2)
library(directlabels)
library(scales)
library(ggthemes)
library(mice)
library(BBmisc)
# Cargue de la base de datos
SABERTYT20162 <- read_delim("SABERTYT20162.csv",
delim = ";", escape_double = FALSE, col_types = cols(ESTU_LIMITA_MOTRIZ = col_character(),
ESTU_LIMITA_INVIDENTE = col_character(),
ESTU_LIMITA_CONDICIONESPECIAL = col_character(),
ESTU_LIMITA_SORDO = col_character(),
ESTU_LIMITA_AUTISMO = col_character()),
locale = locale(decimal_mark = ",",
encoding = "ISO-8859-1"),
trim_ws = TRUE)
View(SABERTYT20162)
base <- SABERTYT20162
#Eliminación de columnas innecesarias
base = base[, -c(16:84)]
#Filtrar por estudiantes colombianos
base = base[base$ESTU_NACIONALIDAD == "1 COLOMBIA",]
#Filtrar por estudiantes listos para ser publicados
base = base[base$ESTU_ESTADO == "PUBLICAR",]
descriptivas<- function(x){data.frame("MEDIDA"=c("Observaciones", "Mínimo", "1er Q", "Media", "Mediana", "Desv Est", "3er Q", "Máximo", "Asimetría", "Curtosis", "atípico leve<", "atípico leve>","atípico extremo<","atípico extremo>", "Err Est Media", "IC(95%) Media Up", "IC(95%) Media Down"),"VALOR"=format(c(length(na.omit(x)), min(na.omit(x)), quantile(na.omit(x), prob=0.25), mean(na.omit(x)), median(na.omit(x)), sd(na.omit(x)), quantile(na.omit(x), prob=0.75), max(na.omit(x)), skewness(na.omit(x)), kurtosis(na.omit(x)), (2.5*quantile(na.omit(x),prob=0.25)-1.5*quantile(na.omit(x), prob=0.75)),(2.5*quantile(na.omit(x),prob=0.75)-1.5*quantile(na.omit(x), prob=0.25)),(4*quantile(na.omit(x),prob=0.25)-3*quantile(na.omit(x), prob=0.75)),(4*quantile(na.omit(x),prob=0.75)-3*quantile(na.omit(x), prob=0.25)), ((sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))+1.96*(sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))-1.96*((sd(na.omit(x))/sqrt(length(na.omit(x))))))), scientific = F))}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS
descriptivas2<-function(Continua,Categorías){
x1=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){length(na.omit(x))})
names(x1)=c("Categoría","Obs")
x2=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){min(na.omit(x))})
names(x2)=c("Categoría","Mínimo")
x3=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.25)})
names(x3)=c("Categoría","1er Q")
x4=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){median(na.omit(x))})
names(x4)=c("Categoría","Mediana")
x5=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){mean(na.omit(x))})
names(x5)=c("Categoría","Media")
x6=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.75)})
names(x6)=c("Categoría","3er Q")
x7=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){max(na.omit(x))})
names(x7)=c("Categoría","Máximo")
x8=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){sd(na.omit(x))})
names(x8)=c("Categoría","Desv Est")
x9=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){skewness(na.omit(x))})
names(x9)=c("Categoría","Asimetría")
x10=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){kurtosis(na.omit(x))})
names(x10)=c("Categoría","Curtosis")
cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)[,-seq(3,19,2)]
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS EN SUBMUESTRAS
tabla_freq<- function(x,total=1,na="ifany"){
if (total==1) {
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",sum(M$`Freq. Abs.`),sum(M$`Freq. Rel.`))
M$`Freq. Rel.`=as.numeric(M$`Freq. Rel.`)
M$`Freq. Abs.`=as.numeric(M$`Freq. Abs.`)
M
} else{
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M
}
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VAR DISCRETAS
tabla_freq2<-function(x,y,na="ifany",prop=0, suma=c("filas","col")){
if (prop==0) {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
M
} else if (prop==1 & suma=="filas") {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 2:ncol(M)) {
M[,i]=M[,i]/M[,ncol(M)]
}
M
} else {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 1:nrow(M)) {
M[i,2:ncol(M)]=M[i,2:ncol(M)]/M[nrow(M),2:ncol(M)]
}
M
}
}
library(lubridate)
#Se verifica que no existan datos duplicados
tabla_freq(duplicated(base))
#Agregar nueva columna nivel superior de inglés
base$ESTU_INGLES_SUPERIOR = ifelse(base$MOD_INGLES_DESEM == "B1" | base$MOD_INGLES_DESEM == "B2", "Sí", "No")
base$ESTU_INGLES_SUPERIOR = factor(base$ESTU_INGLES_SUPERIOR)
tabla_freq(base$ESTU_INGLES_SUPERIOR)
#Agregar nueva columna edad teniendo en cuenta la fecha de nacimiento y la fecha de presentación del exámen 09/10/2016
fecha_examen = ymd("2016-10-09")
base$ESTU_FECHANACIMIENTO = as.Date(base$ESTU_FECHANACIMIENTO, format="%d/%m/%Y")
base$ESTU_EDAD = floor(time_length(ymd(fecha_examen) - ymd(base$ESTU_FECHANACIMIENTO), unit = "year"))
descriptivas(base$ESTU_EDAD)
boxplot(base$ESTU_EDAD)
count(base, base$ESTU_EDAD >0 & base$ESTU_EDAD < 16 )
count(base, base$ESTU_EDAD <= 0)
#Se convierte en NA todos los estudiantes menores de 16 años
base$ESTU_EDAD[base$ESTU_EDAD<16]=NA
#Se elimina la columna fecha de nacimiento
base$ESTU_FECHANACIMIENTO = NULL
tabla_freq(base$ESTU_TIENE_ETNIA)
tabla_freq(base$ESTU_TIENE_ETNIA)
#Se convierte en factor la columna de estu_tiene_etnia
base$ESTU_TIENE_ETNIA = factor(base$ESTU_TIENE_ETNIA)
#Se convierte en factor la columna de estu_etnia
base$ESTU_ETNIA <- factor(base$ESTU_ETNIA, levels = c("1 Comunidad afrodescendiente", "2 Raizal", "3 Comunidad Rom (gitana)", "4 Paez", "5 Cubeo", "6 Embera", "7 Pijao", "8 Wayúu", "9 Pasto", "10 Cancuamo", "11 Inga", "12 Tucano", "13 Huitoto", "14 Sikuani", "15 Palenquero", "16 Arhuaco", "17 Guambiano", "18 Zenú", "19 Otro grupo étnico minoritario", "100 Ninguno"))
#Conocer cuántas personas tienen etnia y no respondieron a cuál pertenecen
inconsistencia_uno = filter(base, base$ESTU_TIENE_ETNIA == "SI" & is.na(base$ESTU_ETNIA))
count(inconsistencia_uno) / count(base)
#Conocer cuántas personas no tienen etnia y respondieron a cuál pertenecen
inconsistencia_dos = filter(base, base$ESTU_TIENE_ETNIA == "NO" & !is.na(base$ESTU_ETNIA))
count(inconsistencia_dos) / count(base)
#Conocer cuántas personas no tienen etnia y respondieron a cuál pertenecen
inconsistencia_tres = filter(base, base$ESTU_TIENE_ETNIA == "SI" & base$ESTU_ETNIA=="100 Ninguno")
count(inconsistencia_tres)
count(inconsistencia_tres) / count(base)
#Número total de anomalías según las tres incosistencias
total_anomalias_estu_etnia = count(inconsistencia_uno) + count(inconsistencia_dos) + count(inconsistencia_tres)
total_anomalias_estu_etnia / count(base)
#Recorre las cinco columnas de discapacidades y reemplaza los NA por "NO" y las "x" por "si"
for (i in 10:14){
base[,i]= ifelse(is.na(base[,i]),"NO","SI")
}
summary(base$NSE)
summary(base$INSE)
#Se crea un dataframe de los estudiantes que tengan NSE vacío
base_campos_vacios_nse = subset(base, is.na(base$NSE))
#Se crea un dataframe de los estudiantes que tengan INSE vacío
base_campos_vacios_inse = subset(base, is.na(base$INSE))
#Se valida de que ambas variables sean vacías cuando una ya lo es
#Verifica que la variable INSE sea numérica
class(base$INSE)
#Convertir la columna NSE en factor
base$NSE = factor(base$NSE)
descriptivas2(base$INSE, base$NSE)
# Número de personas que no coinciden con la norma del ICFES
peso1 = count(subset(base, !(base$INSE >0 & base$INSE <= 41.109 ) & base$NSE == "NSE1"))
peso2 = count(subset(base, !(base$INSE >41.109 & base$INSE <= 51.176 ) & base$NSE == "NSE2"))
peso3 = count(subset(base, !(base$INSE >51.176 & base$INSE <= 64.084 ) & base$NSE == "NSE3"))
peso4 = count(subset(base, !(base$INSE >64.084 & base$INSE <= 100 ) & base$NSE == "NSE4"))
#Se crea un nuevo dataframe teniendo en cuenta el NSE y el peso de las anomalías para cada uno
nse = c("NSE1", "NSE2", "NSE3", "NSE4")
peso = c(0,0,0,0)
pesos = c(peso1, peso2, peso3, peso4)
inconsistentes = data.frame(nse=nse, peso=peso)
for (i in 1:4){
inconsistentes[i,2]= pesos[i]
}
inconsistentes
