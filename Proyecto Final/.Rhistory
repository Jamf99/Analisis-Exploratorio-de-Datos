x9=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){skewness(na.omit(x))})
names(x9)=c("Categoría","Asimetría")
x10=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){kurtosis(na.omit(x))})
names(x10)=c("Categoría","Curtosis")
cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)[,-seq(3,19,2)]
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS EN SUBMUESTRAS
tabla_freq<- function(x,total=1,na="ifany"){
if (total==1) {
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",sum(M$`Freq. Abs.`),sum(M$`Freq. Rel.`))
M$`Freq. Rel.`=as.numeric(M$`Freq. Rel.`)
M$`Freq. Abs.`=as.numeric(M$`Freq. Abs.`)
M
} else{
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M
}
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VAR DISCRETAS
tabla_freq2<-function(x,y,na="ifany",prop=0, suma=c("filas","col")){
if (prop==0) {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
M
} else if (prop==1 & suma=="filas") {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 2:ncol(M)) {
M[,i]=M[,i]/M[,ncol(M)]
}
M
} else {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 1:nrow(M)) {
M[i,2:ncol(M)]=M[i,2:ncol(M)]/M[nrow(M),2:ncol(M)]
}
M
}
}
#CARGUE DE LAS BASES DE DATOS
inglesa_1 = read_excel("Inglesa.xlsx", sheet = "18-19")
inglesa_2 = read_excel("Inglesa.xlsx", sheet = "19-20")
inglesa_3 = read_excel("Inglesa.xlsx", sheet = "20-21")
#CREAR TABLA DE LAS VARIABLES
variables <- read_excel("Variables.xlsx")
variables
# REESTRUCTURACIÓN Y UNIÓN DE LAS BASES DE DATOS
inglesa_aux = rbind(inglesa_2, inglesa_3)
inglesa_final = full_join(inglesa_aux, inglesa_1)
# FILTRACIÓN POR COLUMNAS DE INTERÉS
inglesa_final = inglesa_final[ , c(2, 4:11, 15:24)]
#Revisa duplicados
tabla_freq(duplicated(inglesa_final))
#Revisa tipo de variable
str(inglesa_final)
#Elimina duplicados (POR VER)
inglesa_final = inglesa_final[!duplicated(inglesa_final),]
summary(inglesa_final$Date)
#Revisar anomalías
tabla_freq(inglesa_final$HomeTeam)
#Eliminar campo nulo
inglesa_final = inglesa_final[!is.na(inglesa_final$HomeTeam),]
tabla_freq(inglesa_final$AwayTeam)
tabla_freq(inglesa_final$FTHG)
anomalos_FTHG = inglesa_final[(inglesa_final$FTHG == 33 | inglesa_final$FTHG < 0 | is.na(inglesa_final$FTHG)),]
boxplot(inglesa_final$FTHG)
remove(Inglesa)
remove(inglesa_aux)
View(invalido)
View(invalido)
remove(invalido)
remove(transpose_df)
inglesa_final$FTHG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 2
View(inglesa_final)
View(inglesa_final)
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTHG = inglesa_final[(inglesa_final$FTHG == 33 | inglesa_final$FTHG < 0 | is.na(inglesa_final$FTHG)),]
hola = inglesa_final$FTHG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 2
hola = inglesa_final$FTHG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27",]= 2
hola = inglesa_final$FTHG[(inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"),]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 2
hola = inglesa_final[(inglesa_final$FTHG == "Liverpool" & inglesa_final$Date < "2019-10-27"),]
View(hola)
View(hola)
---
title: "Proyecto Final Análisis Exploratorio de Datos"
author: "María Paula Fernández, Cristian Palechor, Jorge Antonio Morales"
date: "21/2/2022"
output:
html_document:
theme: journal
highlight: espresso
dfprint: paged
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(reshape2)
library(dplyr)
library(e1071)
library(Hmisc)
library(inspectdf)
library(funModeling)
library(VIM)
library(stringr)
library(xtable)
library(ggplot2)
library(directlabels)
library(scales)
library(ggthemes)
library(mice)
library(BBmisc)
descriptivas<- function(x){data.frame("MEDIDA"=c("Observaciones", "Mínimo", "1er Q", "Media", "Mediana", "Desv Est", "3er Q", "Máximo", "Asimetría", "Curtosis", "atípico leve<", "atípico leve>","atípico extremo<","atípico extremo>", "Err Est Media", "IC(95%) Media Up", "IC(95%) Media Down"),"VALOR"=format(c(length(na.omit(x)), min(na.omit(x)), quantile(na.omit(x), prob=0.25), mean(na.omit(x)), median(na.omit(x)), sd(na.omit(x)), quantile(na.omit(x), prob=0.75), max(na.omit(x)), skewness(na.omit(x)), kurtosis(na.omit(x)), (2.5*quantile(na.omit(x),prob=0.25)-1.5*quantile(na.omit(x), prob=0.75)),(2.5*quantile(na.omit(x),prob=0.75)-1.5*quantile(na.omit(x), prob=0.25)),(4*quantile(na.omit(x),prob=0.25)-3*quantile(na.omit(x), prob=0.75)),(4*quantile(na.omit(x),prob=0.75)-3*quantile(na.omit(x), prob=0.25)), ((sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))+1.96*(sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))-1.96*((sd(na.omit(x))/sqrt(length(na.omit(x))))))), scientific = F))}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS
descriptivas2<-function(Continua,Categorías){
x1=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){length(na.omit(x))})
names(x1)=c("Categoría","Obs")
x2=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){min(na.omit(x))})
names(x2)=c("Categoría","Mínimo")
x3=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.25)})
names(x3)=c("Categoría","1er Q")
x4=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){median(na.omit(x))})
names(x4)=c("Categoría","Mediana")
x5=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){mean(na.omit(x))})
names(x5)=c("Categoría","Media")
x6=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.75)})
names(x6)=c("Categoría","3er Q")
x7=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){max(na.omit(x))})
names(x7)=c("Categoría","Máximo")
x8=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){sd(na.omit(x))})
names(x8)=c("Categoría","Desv Est")
x9=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){skewness(na.omit(x))})
names(x9)=c("Categoría","Asimetría")
x10=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){kurtosis(na.omit(x))})
names(x10)=c("Categoría","Curtosis")
cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)[,-seq(3,19,2)]
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS EN SUBMUESTRAS
tabla_freq<- function(x,total=1,na="ifany"){
if (total==1) {
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",sum(M$`Freq. Abs.`),sum(M$`Freq. Rel.`))
M$`Freq. Rel.`=as.numeric(M$`Freq. Rel.`)
M$`Freq. Abs.`=as.numeric(M$`Freq. Abs.`)
M
} else{
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M
}
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VAR DISCRETAS
tabla_freq2<-function(x,y,na="ifany",prop=0, suma=c("filas","col")){
if (prop==0) {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
M
} else if (prop==1 & suma=="filas") {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 2:ncol(M)) {
M[,i]=M[,i]/M[,ncol(M)]
}
M
} else {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 1:nrow(M)) {
M[i,2:ncol(M)]=M[i,2:ncol(M)]/M[nrow(M),2:ncol(M)]
}
M
}
}
```
## Introducción (primera versión)
Debido a la pandemia del COVID-19 que asotó al mundo en el 2020, muchos eventos masivos se han visto afectados, entre ellos el futbol. Es por esto que se ha decidido realizar un estudio con el propósito de saber el impacto que tiene el público en los jugadores a la hora del partido cuando éste se encuentra en puerta cerrada jugando de local en la liga inglesa.
Debido a lo anterior, el objetivo principal para esta primera parte del informe es analizar los datos de los partidos de la liga inglesa desde el año 2018 hasta el 2021. Se realizará el análisis exploratorio de los datos para verificar anomalías y limpiar los datos.
La estructura del documento consta en describir cada una de las variables de la base de datos, detectar las anomalías que se presenten dentro de ella, crear nuevas variables que puedan influir con la información y por último, realizar algunas conclusiones con sus recomendaciones.
```{r, include=FALSE}
#CARGUE DE LAS BASES DE DATOS
inglesa_1 = read_excel("Inglesa.xlsx", sheet = "18-19")
inglesa_2 = read_excel("Inglesa.xlsx", sheet = "19-20")
inglesa_3 = read_excel("Inglesa.xlsx", sheet = "20-21")
```
## Sobre los datos
El repositorio de los datos cuentan con tres bases de datos independientes que corresponden a los partidos disputados por la liga inglesa entre los años 2018 - 2019 (primera base de datos con 380 registros), 2020 - 2021 (segunda base de datos con 383 registros) y 2020 - 2021 (tercera base de datos con 385 registros).
La primera base de datos cuenta con 62 variables que representan a los datos más característicos del partido y las probabilidades según diferentes casas de apuestas. Por otra parte, tanto la segunda y tercera base de datos cuenta con 106 variables idénticas que representan también a los datos más característicos del juego y las diferentes probabilidades según las casas de apuestas.
Con el fin de tener un mejor entendimiento de la información, se decidió cambiar la estructura de los datos, separando cada partido según el tipo de juego de los equipos. Esto redujo la cantidad de variables que representan las características de los partidos y duplicó el número de registros debido a la clasificación. En cuanto a las columnas que representan las probabilidades de las casas de apuestas, se llegó a la conclusión de omitirlas debido a que éstas no influyen en el impacto que tiene en los equipos que juegan de local cuando hay puerta cerrada.
```{r}
#CREAR TABLA DE LAS VARIABLES
variables <- read_excel("Variables.xlsx")
variables
```
Finalmente, después de unir las tres bases de datos, que contaban con los mismas variables en cada una, cuenta con 11 columnas y 1148 registros.
```{r, include=FALSE}
# REESTRUCTURACIÓN Y UNIÓN DE LAS BASES DE DATOS
inglesa_aux = rbind(inglesa_2, inglesa_3)
inglesa_final = full_join(inglesa_aux, inglesa_1)
# FILTRACIÓN POR COLUMNAS DE INTERÉS
inglesa_final = inglesa_final[ , c(2, 4:11, 15:24)]
```
## Detección de anomalías
```{r}
#Revisa duplicados
tabla_freq(duplicated(inglesa_final))
#Revisa tipo de variable
str(inglesa_final)
```
Existen 7 filas duplicadas por lo cual se procede a eliminarlas.Por otra parte, para todas las variables no se encontraron anomalías de tipo *Formato de las variables no coincide con su tipo de variable*, por lo tanto, se analizará variable por variable en busca de cualquier tipo de anomalía:
```{r, include=FALSE}
#Elimina duplicados (POR VER)
inglesa_final = inglesa_final[!duplicated(inglesa_final),]
```
### Date
```{r}
summary(inglesa_final$Date)
```
Se puede observar que no se encuentran datos atípicos, ni inválidos, además de que no posee inconsistencias ni campos vacíos.
### HomeTeam
Para los equipos locales no existen valores atípicos, inválidos, ni con errores de digitación. No obstante, se halló un campo vacío que corresponde al 0,087% de los datos, por tanto se procede lo tomaremos como un MCAR y realizaremos un Listwise deletion.
```{r}
#Revisar anomalías
tabla_freq(inglesa_final$HomeTeam)
#Eliminar campo nulo
inglesa_final = inglesa_final[!is.na(inglesa_final$HomeTeam),]
```
### AwayTeam
No existen anomalías.
```{r}
tabla_freq(inglesa_final$AwayTeam)
```
### FTHG
Observamos un dato inválido (-2) y un atípico (33) que corresponden al 0.17%. También hay 5 campos vacíos que corresponden al 0.43%. Para este caso, se decide imputar basado en los marcadores oficiales de los partidos que se encuentran en otras bases de datos.
```{r}
tabla_freq(inglesa_final$FTHG)
```
```{r}
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTHG = inglesa_final[(inglesa_final$FTHG == 33 | inglesa_final$FTHG < 0 | is.na(inglesa_final$FTHG)),]
boxplot(inglesa_final$FTHG)
hola = inglesa_final[(inglesa_final$FTHG == "Liverpool" & inglesa_final$Date < "2019-10-27"),]
View(hola)
View(hola)
hola = inglesa_final[(inglesa_final$FTHG == "Liverpool" & inglesa_final$Date == "2019-10-27"),]
View(hola)
View(hola)
hola = inglesa_final[(inglesa_final$FTHG == "Liverpool"),]
View(hola)
View(hola)
---
title: "Proyecto Final Análisis Exploratorio de Datos"
author: "María Paula Fernández, Cristian Palechor, Jorge Antonio Morales"
date: "21/2/2022"
output:
html_document:
theme: journal
highlight: espresso
dfprint: paged
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(reshape2)
library(dplyr)
library(e1071)
library(Hmisc)
library(inspectdf)
library(funModeling)
library(VIM)
library(stringr)
library(xtable)
library(ggplot2)
library(directlabels)
library(scales)
library(ggthemes)
library(mice)
library(BBmisc)
descriptivas<- function(x){data.frame("MEDIDA"=c("Observaciones", "Mínimo", "1er Q", "Media", "Mediana", "Desv Est", "3er Q", "Máximo", "Asimetría", "Curtosis", "atípico leve<", "atípico leve>","atípico extremo<","atípico extremo>", "Err Est Media", "IC(95%) Media Up", "IC(95%) Media Down"),"VALOR"=format(c(length(na.omit(x)), min(na.omit(x)), quantile(na.omit(x), prob=0.25), mean(na.omit(x)), median(na.omit(x)), sd(na.omit(x)), quantile(na.omit(x), prob=0.75), max(na.omit(x)), skewness(na.omit(x)), kurtosis(na.omit(x)), (2.5*quantile(na.omit(x),prob=0.25)-1.5*quantile(na.omit(x), prob=0.75)),(2.5*quantile(na.omit(x),prob=0.75)-1.5*quantile(na.omit(x), prob=0.25)),(4*quantile(na.omit(x),prob=0.25)-3*quantile(na.omit(x), prob=0.75)),(4*quantile(na.omit(x),prob=0.75)-3*quantile(na.omit(x), prob=0.25)), ((sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))+1.96*(sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))-1.96*((sd(na.omit(x))/sqrt(length(na.omit(x))))))), scientific = F))}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS
descriptivas2<-function(Continua,Categorías){
x1=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){length(na.omit(x))})
names(x1)=c("Categoría","Obs")
x2=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){min(na.omit(x))})
names(x2)=c("Categoría","Mínimo")
x3=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.25)})
names(x3)=c("Categoría","1er Q")
x4=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){median(na.omit(x))})
names(x4)=c("Categoría","Mediana")
x5=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){mean(na.omit(x))})
names(x5)=c("Categoría","Media")
x6=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.75)})
names(x6)=c("Categoría","3er Q")
x7=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){max(na.omit(x))})
names(x7)=c("Categoría","Máximo")
x8=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){sd(na.omit(x))})
names(x8)=c("Categoría","Desv Est")
x9=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){skewness(na.omit(x))})
names(x9)=c("Categoría","Asimetría")
x10=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){kurtosis(na.omit(x))})
names(x10)=c("Categoría","Curtosis")
cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)[,-seq(3,19,2)]
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS EN SUBMUESTRAS
tabla_freq<- function(x,total=1,na="ifany"){
if (total==1) {
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",sum(M$`Freq. Abs.`),sum(M$`Freq. Rel.`))
M$`Freq. Rel.`=as.numeric(M$`Freq. Rel.`)
M$`Freq. Abs.`=as.numeric(M$`Freq. Abs.`)
M
} else{
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M
}
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VAR DISCRETAS
tabla_freq2<-function(x,y,na="ifany",prop=0, suma=c("filas","col")){
if (prop==0) {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
M
} else if (prop==1 & suma=="filas") {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 2:ncol(M)) {
M[,i]=M[,i]/M[,ncol(M)]
}
M
} else {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 1:nrow(M)) {
M[i,2:ncol(M)]=M[i,2:ncol(M)]/M[nrow(M),2:ncol(M)]
}
M
}
}
```
## Introducción (primera versión)
Debido a la pandemia del COVID-19 que asotó al mundo en el 2020, muchos eventos masivos se han visto afectados, entre ellos el futbol. Es por esto que se ha decidido realizar un estudio con el propósito de saber el impacto que tiene el público en los jugadores a la hora del partido cuando éste se encuentra en puerta cerrada jugando de local en la liga inglesa.
Debido a lo anterior, el objetivo principal para esta primera parte del informe es analizar los datos de los partidos de la liga inglesa desde el año 2018 hasta el 2021. Se realizará el análisis exploratorio de los datos para verificar anomalías y limpiar los datos.
La estructura del documento consta en describir cada una de las variables de la base de datos, detectar las anomalías que se presenten dentro de ella, crear nuevas variables que puedan influir con la información y por último, realizar algunas conclusiones con sus recomendaciones.
```{r, include=FALSE}
#CARGUE DE LAS BASES DE DATOS
inglesa_1 = read_excel("Inglesa.xlsx", sheet = "18-19")
inglesa_2 = read_excel("Inglesa.xlsx", sheet = "19-20")
inglesa_3 = read_excel("Inglesa.xlsx", sheet = "20-21")
```
## Sobre los datos
El repositorio de los datos cuentan con tres bases de datos independientes que corresponden a los partidos disputados por la liga inglesa entre los años 2018 - 2019 (primera base de datos con 380 registros), 2020 - 2021 (segunda base de datos con 383 registros) y 2020 - 2021 (tercera base de datos con 385 registros).
La primera base de datos cuenta con 62 variables que representan a los datos más característicos del partido y las probabilidades según diferentes casas de apuestas. Por otra parte, tanto la segunda y tercera base de datos cuenta con 106 variables idénticas que representan también a los datos más característicos del juego y las diferentes probabilidades según las casas de apuestas.
Con el fin de tener un mejor entendimiento de la información, se decidió cambiar la estructura de los datos, separando cada partido según el tipo de juego de los equipos. Esto redujo la cantidad de variables que representan las características de los partidos y duplicó el número de registros debido a la clasificación. En cuanto a las columnas que representan las probabilidades de las casas de apuestas, se llegó a la conclusión de omitirlas debido a que éstas no influyen en el impacto que tiene en los equipos que juegan de local cuando hay puerta cerrada.
```{r}
#CREAR TABLA DE LAS VARIABLES
variables <- read_excel("Variables.xlsx")
variables
```
Finalmente, después de unir las tres bases de datos, que contaban con los mismas variables en cada una, cuenta con 11 columnas y 1148 registros.
```{r, include=FALSE}
# REESTRUCTURACIÓN Y UNIÓN DE LAS BASES DE DATOS
inglesa_aux = rbind(inglesa_2, inglesa_3)
inglesa_final = full_join(inglesa_aux, inglesa_1)
# FILTRACIÓN POR COLUMNAS DE INTERÉS
inglesa_final = inglesa_final[ , c(2, 4:11, 15:24)]
```
## Detección de anomalías
```{r}
#Revisa duplicados
tabla_freq(duplicated(inglesa_final))
#Revisa tipo de variable
str(inglesa_final)
```
Existen 7 filas duplicadas por lo cual se procede a eliminarlas.Por otra parte, para todas las variables no se encontraron anomalías de tipo *Formato de las variables no coincide con su tipo de variable*, por lo tanto, se analizará variable por variable en busca de cualquier tipo de anomalía:
```{r, include=FALSE}
#Elimina duplicados (POR VER)
inglesa_final = inglesa_final[!duplicated(inglesa_final),]
```
### Date
```{r}
summary(inglesa_final$Date)
```
Se puede observar que no se encuentran datos atípicos, ni inválidos, además de que no posee inconsistencias ni campos vacíos.
### HomeTeam
Para los equipos locales no existen valores atípicos, inválidos, ni con errores de digitación. No obstante, se halló un campo vacío que corresponde al 0,087% de los datos, por tanto se procede lo tomaremos como un MCAR y realizaremos un Listwise deletion.
```{r}
#Revisar anomalías
tabla_freq(inglesa_final$HomeTeam)
#Eliminar campo nulo
inglesa_final = inglesa_final[!is.na(inglesa_final$HomeTeam),]
```
### AwayTeam
No existen anomalías.
```{r}
tabla_freq(inglesa_final$AwayTeam)
```
### FTHG
Observamos un dato inválido (-2) y un atípico (33) que corresponden al 0.17%. También hay 5 campos vacíos que corresponden al 0.43%. Para este caso, se decide imputar basado en los marcadores oficiales de los partidos que se encuentran en otras bases de datos.
```{r}
tabla_freq(inglesa_final$FTHG)
```
```{r}
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTHG = inglesa_final[(inglesa_final$FTHG == 33 | inglesa_final$FTHG < 0 | is.na(inglesa_final$FTHG)),]
boxplot(inglesa_final$FTHG)
hola = inglesa_final[(inglesa_final$FTHG == "Liverpool"),]
View(hola)
View(hola)
hola = inglesa_final[(inglesa_final$HomeTeam == "Liverpool"),]
View(hola)
View(hola)
hola = inglesa_final[(inglesa_final$HomeTeam == "Liverpool" & inglesa_final$Date == "2019-10-27"),]
View(hola)
View(hola)
hola = inglesa_final[(inglesa_final$Date == "2019-10-27"),]
View(hola)
View(hola)
hola = inglesa_final[(inglesa_final$Date == as.Date("2019-10-27")),]
inglesa_final$Date = as.Date(inglesa_final$Date)
#Revisa tipo de variable
str(inglesa_final)
inglesa_final$Date = as.Date(inglesa_final$Date, format="%d-%m-%y")
#Revisa tipo de variable
str(inglesa_final)
hola = inglesa_final[(inglesa_final$Date == 2019-10-27)),]
hola = inglesa_final[(inglesa_final$Date == 2019-10-27),]
View(anomalos_HomeTeam)
View(anomalos_HomeTeam)
hola = inglesa_final[(inglesa_final$Date == "2019-10-27"),]
View(hola)
View(hola)
inglesa_final$FTHG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 2
hola = inglesa_final[(inglesa_final$Date == "2019-10-27"),]
View(hola)
View(hola)
View(anomalos_HomeTeam)
View(anomalos_HomeTeam)
View(anomalos_FTHG)
View(anomalos_FTHG)
tabla_freq(inglesa_final$FTAG)
summary(inglesa_final$FTAG)
summary(inglesa_final$FTHG)
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTAG = inglesa_final[(inglesa_final$FTAG == 27 | inglesa_final$FTAG < 0 | is.na(inglesa_final$FTAG)),]
View(anomalos_FTAG)
View(anomalos_FTAG)
tabla_freq(inglesa_final$FTR)
