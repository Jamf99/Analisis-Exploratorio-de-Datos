inglesa_1 = read_excel("Inglesa.xlsx", sheet = "18-19")
inglesa_2 = read_excel("Inglesa.xlsx", sheet = "19-20")
inglesa_3 = read_excel("Inglesa.xlsx", sheet = "20-21")
#CREAR TABLA DE LAS VARIABLES
variables <- read_excel("Variables.xlsx")
variables %>%
kbl() %>%
kable_styling()
# REESTRUCTURACIÓN Y UNIÓN DE LAS BASES DE DATOS
inglesa_aux = rbind(inglesa_2, inglesa_3)
inglesa_final = full_join(inglesa_aux, inglesa_1)
# FILTRACIÓN POR COLUMNAS DE INTERÉS
inglesa_final = inglesa_final[ , c(2, 4:11, 15:24)]
#Revisa duplicados
tabla_freq(duplicated(inglesa_final)) %>%
kbl() %>%
kable_styling()
#Elimina duplicados
inglesa_final = inglesa_final[!duplicated(inglesa_final),]
#Revisa tipo de variable
str(inglesa_final) %>%
kbl() %>%
kable_styling()
inglesa_final$Date = as.Date(inglesa_final$Date, format="%d-%m-%y")
capture.output(aggr(inglesa_final, numbers=T, prop=F,sortVars = T,cex.axis = 0.7), file=tempfile())
summary(inglesa_final$Date)
#Revisar anomalías
tabla_freq(inglesa_final$HomeTeam)
#Eliminar campo nulo
inglesa_final = inglesa_final[!is.na(inglesa_final$HomeTeam),]
tabla_freq(inglesa_final$AwayTeam)
# Resumen de la variable
summary(inglesa_final$FTHG)
# Gráfica de bigotes
boxplot(inglesa_final$FTHG)
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTHG = inglesa_final[(inglesa_final$FTHG == 33 | inglesa_final$FTHG < 0 | is.na(inglesa_final$FTHG)),]
# Imputando datos con base en medios oficiales
inglesa_final$FTHG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Crystal Palace" & inglesa_final$Date=="2020-10-18"]= 1
inglesa_final$FTHG[inglesa_final$HomeTeam=="West Brom" & inglesa_final$Date=="2021-01-30"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Southampton" & inglesa_final$Date=="2021-05-11"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Cardiff" & inglesa_final$Date=="2018-09-02"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Watford" & inglesa_final$Date=="2018-09-02"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Bournemouth" & inglesa_final$Date=="2018-09-15"]= 4
# Resumen de la variable
summary(inglesa_final$FTAG)
# Gráfica de bigotes
boxplot(inglesa_final$FTAG)
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTAG = inglesa_final[(inglesa_final$FTAG == 27 | inglesa_final$FTAG < 0 | is.na(inglesa_final$FTAG)),]
# Imputando datos con base en medios oficiales
inglesa_final$FTAG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="Sheffield United" & inglesa_final$Date=="2019-12-05"]= 2
inglesa_final$FTAG[inglesa_final$HomeTeam=="Crystal Palace" & inglesa_final$Date=="2020-10-18"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="West Brom" & inglesa_final$Date=="2021-01-30"]= 2
inglesa_final$FTAG[inglesa_final$HomeTeam=="Cardiff" & inglesa_final$Date=="2018-09-02"]= 3
inglesa_final$FTAG[inglesa_final$HomeTeam=="Watford" & inglesa_final$Date=="2018-09-02"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="Bournemouth" & inglesa_final$Date=="2018-09-15"]= 2
tabla_freq(inglesa_final$FTR) %>%
kbl() %>%
kable_styling()
# SE RECALCULA DE NUEVO LA VARIABLE
inglesa_final$FTR = ifelse((inglesa_final$FTHG > inglesa_final$FTAG), "H", ifelse((inglesa_final$FTHG < inglesa_final$FTAG), "A", "D"));
summary(inglesa_final$HTHG)
summary(inglesa_final$HTAG)
tabla_freq(inglesa_final$HTR) %>%
kbl() %>%
kable_styling()
# SE RECALCULA DE NUEVO LA VARIABLE
inglesa_final$HTR = ifelse((inglesa_final$HTHG > inglesa_final$HTAG), "H", ifelse((inglesa_final$HTHG < inglesa_final$HTAG), "A", "D"));
summary(inglesa_final$HST)
anomalias_HST = inglesa_final[(is.na(inglesa_final$HST)),]
inglesa_final = inglesa_final[!(is.na(inglesa_final$HST)),]
summary(inglesa_final$AST)
summary(inglesa_final$HF)
summary(inglesa_final$AF)
summary(inglesa_final$HC)
summary(inglesa_final$AC)
summary(inglesa_final$HY)
summary(inglesa_final$AY)
summary(inglesa_final$HR)
summary(inglesa_final$AR)
capture.output(aggr(inglesa_final, numbers=T, prop=F,sortVars = T,cex.axis = 0.7), file=tempfile())
inglesa_final$Pandemic = ifelse((inglesa_final$Date > "2020-03-11" & inglesa_final$Date < "2020-12-02") , "Puerta cerrada", ifelse((inglesa_final$Date >= "2020-12-11" & inglesa_final$Date < "2021-07-19"), "Aforo limitado", "Sin restricciones"))
tabla_freq(inglesa_final$Pandemic) %>%
kbl() %>%
kable_styling()
tabla_titulos = read_excel("Equipos.xlsx", col_types = c("text",
"numeric", "numeric", "text"))
definirTamanoEquipo = function(SumatoriaTitulos, TuvoTituloMenos20Años) {
if(SumatoriaTitulos >= 20 && TuvoTituloMenos20Años == "Sí"){
return("Grande")
}else if((SumatoriaTitulos >= 10 && SumatoriaTitulos < 20) && TuvoTituloMenos20Años == "No") {
return("Mediano")
}else {
return("Pequeño")
}
}
tabla_titulos$TeamSize = definirTamanoEquipo(tabla_titulos$titulos + tabla_titulos$subcampeon, tabla_titulos$tuvoTituloMenos20Años)
Variables_Nuevas <- read_excel("Variables Nuevas.xlsx")
Variables_Nuevas %>%
kbl() %>%
kable_styling()
save(inglesa_final, file="base_datos_inglesa_final.RData")
tabla_titulos = read_excel("Equipos.xlsx", col_types = c("text",
"numeric", "numeric", "text", "text"))
View(tabla_titulos)
View(equipos)
View(equipos)
View(equipos)
View(equipos)
inglesa_final$HomeTeam = ifelse(inglesa_final$HomeTeam == "Arsenal" || inglesa_final$HomeTeam == "Liverpool" || inglesa_final$HomeTeam == "Man United", "Grande", ifelse(inglesa_final$HomeTeam == "Aston Villa" || inglesa_final$HomeTeam == "Chelsea" || inglesa_final$HomeTeam == "Everton" || inglesa_final$HomeTeam == "Man City", "Mediano", "Pequeño"))
View(inglesa_final)
View(inglesa_final)
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(reshape2)
library(dplyr)
library(e1071)
library(Hmisc)
library(inspectdf)
library(funModeling)
library(VIM)
library(stringr)
library(xtable)
library(ggplot2)
library(directlabels)
library(scales)
library(ggthemes)
library(mice)
library(BBmisc)
library(tidyverse)
library(DT)
library(kableExtra)
descriptivas<- function(x){data.frame("MEDIDA"=c("Observaciones", "Mínimo", "1er Q", "Media", "Mediana", "Desv Est", "3er Q", "Máximo", "Asimetría", "Curtosis", "atípico leve<", "atípico leve>","atípico extremo<","atípico extremo>", "Err Est Media", "IC(95%) Media Up", "IC(95%) Media Down"),"VALOR"=format(c(length(na.omit(x)), min(na.omit(x)), quantile(na.omit(x), prob=0.25), mean(na.omit(x)), median(na.omit(x)), sd(na.omit(x)), quantile(na.omit(x), prob=0.75), max(na.omit(x)), skewness(na.omit(x)), kurtosis(na.omit(x)), (2.5*quantile(na.omit(x),prob=0.25)-1.5*quantile(na.omit(x), prob=0.75)),(2.5*quantile(na.omit(x),prob=0.75)-1.5*quantile(na.omit(x), prob=0.25)),(4*quantile(na.omit(x),prob=0.25)-3*quantile(na.omit(x), prob=0.75)),(4*quantile(na.omit(x),prob=0.75)-3*quantile(na.omit(x), prob=0.25)), ((sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))+1.96*(sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))-1.96*((sd(na.omit(x))/sqrt(length(na.omit(x))))))), scientific = F))}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS
descriptivas2<-function(Continua,Categorías){
x1=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){length(na.omit(x))})
names(x1)=c("Categoría","Obs")
x2=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){min(na.omit(x))})
names(x2)=c("Categoría","Mínimo")
x3=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.25)})
names(x3)=c("Categoría","1er Q")
x4=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){median(na.omit(x))})
names(x4)=c("Categoría","Mediana")
x5=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){mean(na.omit(x))})
names(x5)=c("Categoría","Media")
x6=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.75)})
names(x6)=c("Categoría","3er Q")
x7=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){max(na.omit(x))})
names(x7)=c("Categoría","Máximo")
x8=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){sd(na.omit(x))})
names(x8)=c("Categoría","Desv Est")
x9=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){skewness(na.omit(x))})
names(x9)=c("Categoría","Asimetría")
x10=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){kurtosis(na.omit(x))})
names(x10)=c("Categoría","Curtosis")
cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)[,-seq(3,19,2)]
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS EN SUBMUESTRAS
tabla_freq<- function(x,total=1,na="ifany"){
if (total==1) {
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",sum(M$`Freq. Abs.`),sum(M$`Freq. Rel.`))
M$`Freq. Rel.`=as.numeric(M$`Freq. Rel.`)
M$`Freq. Abs.`=as.numeric(M$`Freq. Abs.`)
M
} else{
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M
}
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VAR DISCRETAS
tabla_freq2<-function(x,y,na="ifany",prop=0, suma=c("filas","col")){
if (prop==0) {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
M
} else if (prop==1 & suma=="filas") {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 2:ncol(M)) {
M[,i]=M[,i]/M[,ncol(M)]
}
M
} else {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 1:nrow(M)) {
M[i,2:ncol(M)]=M[i,2:ncol(M)]/M[nrow(M),2:ncol(M)]
}
M
}
}
#CARGUE DE LAS BASES DE DATOS
inglesa_1 = read_excel("Inglesa.xlsx", sheet = "18-19")
inglesa_2 = read_excel("Inglesa.xlsx", sheet = "19-20")
inglesa_3 = read_excel("Inglesa.xlsx", sheet = "20-21")
#CREAR TABLA DE LAS VARIABLES
variables <- read_excel("Variables.xlsx")
variables %>%
kbl() %>%
kable_styling()
# REESTRUCTURACIÓN Y UNIÓN DE LAS BASES DE DATOS
inglesa_aux = rbind(inglesa_2, inglesa_3)
inglesa_final = full_join(inglesa_aux, inglesa_1)
# FILTRACIÓN POR COLUMNAS DE INTERÉS
inglesa_final = inglesa_final[ , c(2, 4:11, 15:24)]
#Revisa duplicados
tabla_freq(duplicated(inglesa_final)) %>%
kbl() %>%
kable_styling()
#Elimina duplicados
inglesa_final = inglesa_final[!duplicated(inglesa_final),]
#Revisa tipo de variable
str(inglesa_final) %>%
kbl() %>%
kable_styling()
inglesa_final$Date = as.Date(inglesa_final$Date, format="%d-%m-%y")
capture.output(aggr(inglesa_final, numbers=T, prop=F,sortVars = T,cex.axis = 0.7), file=tempfile())
summary(inglesa_final$Date)
#Revisar anomalías
tabla_freq(inglesa_final$HomeTeam)
#Eliminar campo nulo
inglesa_final = inglesa_final[!is.na(inglesa_final$HomeTeam),]
tabla_freq(inglesa_final$AwayTeam)
# Resumen de la variable
summary(inglesa_final$FTHG)
# Gráfica de bigotes
boxplot(inglesa_final$FTHG)
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTHG = inglesa_final[(inglesa_final$FTHG == 33 | inglesa_final$FTHG < 0 | is.na(inglesa_final$FTHG)),]
# Imputando datos con base en medios oficiales
inglesa_final$FTHG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Crystal Palace" & inglesa_final$Date=="2020-10-18"]= 1
inglesa_final$FTHG[inglesa_final$HomeTeam=="West Brom" & inglesa_final$Date=="2021-01-30"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Southampton" & inglesa_final$Date=="2021-05-11"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Cardiff" & inglesa_final$Date=="2018-09-02"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Watford" & inglesa_final$Date=="2018-09-02"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Bournemouth" & inglesa_final$Date=="2018-09-15"]= 4
# Resumen de la variable
summary(inglesa_final$FTAG)
# Gráfica de bigotes
boxplot(inglesa_final$FTAG)
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTAG = inglesa_final[(inglesa_final$FTAG == 27 | inglesa_final$FTAG < 0 | is.na(inglesa_final$FTAG)),]
# Imputando datos con base en medios oficiales
inglesa_final$FTAG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="Sheffield United" & inglesa_final$Date=="2019-12-05"]= 2
inglesa_final$FTAG[inglesa_final$HomeTeam=="Crystal Palace" & inglesa_final$Date=="2020-10-18"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="West Brom" & inglesa_final$Date=="2021-01-30"]= 2
inglesa_final$FTAG[inglesa_final$HomeTeam=="Cardiff" & inglesa_final$Date=="2018-09-02"]= 3
inglesa_final$FTAG[inglesa_final$HomeTeam=="Watford" & inglesa_final$Date=="2018-09-02"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="Bournemouth" & inglesa_final$Date=="2018-09-15"]= 2
tabla_freq(inglesa_final$FTR) %>%
kbl() %>%
kable_styling()
# SE RECALCULA DE NUEVO LA VARIABLE
inglesa_final$FTR = ifelse((inglesa_final$FTHG > inglesa_final$FTAG), "H", ifelse((inglesa_final$FTHG < inglesa_final$FTAG), "A", "D"));
summary(inglesa_final$HTHG)
summary(inglesa_final$HTAG)
tabla_freq(inglesa_final$HTR) %>%
kbl() %>%
kable_styling()
# SE RECALCULA DE NUEVO LA VARIABLE
inglesa_final$HTR = ifelse((inglesa_final$HTHG > inglesa_final$HTAG), "H", ifelse((inglesa_final$HTHG < inglesa_final$HTAG), "A", "D"));
summary(inglesa_final$HST)
anomalias_HST = inglesa_final[(is.na(inglesa_final$HST)),]
inglesa_final = inglesa_final[!(is.na(inglesa_final$HST)),]
summary(inglesa_final$AST)
summary(inglesa_final$HF)
summary(inglesa_final$AF)
summary(inglesa_final$HC)
summary(inglesa_final$AC)
summary(inglesa_final$HY)
summary(inglesa_final$AY)
summary(inglesa_final$HR)
summary(inglesa_final$AR)
capture.output(aggr(inglesa_final, numbers=T, prop=F,sortVars = T,cex.axis = 0.7), file=tempfile())
inglesa_final$Pandemic = ifelse((inglesa_final$Date > "2020-03-11" & inglesa_final$Date < "2020-12-02") , "Puerta cerrada", ifelse((inglesa_final$Date >= "2020-12-11" & inglesa_final$Date < "2021-07-19"), "Aforo limitado", "Sin restricciones"))
tabla_freq(inglesa_final$Pandemic) %>%
kbl() %>%
kable_styling()
inglesa_final$HomeTeamSize = ifelse(inglesa_final$HomeTeam == "Arsenal" || inglesa_final$HomeTeam == "Liverpool" || inglesa_final$HomeTeam == "Man United", "Grande", ifelse(inglesa_final$HomeTeam == "Aston Villa" || inglesa_final$HomeTeam == "Chelsea" || inglesa_final$HomeTeam == "Everton" || inglesa_final$HomeTeam == "Man City", "Mediano", "Pequeño"))
Variables_Nuevas <- read_excel("Variables Nuevas.xlsx")
Variables_Nuevas %>%
kbl() %>%
kable_styling()
save(inglesa_final, file="base_datos_inglesa_final.RData")
inglesa_final$HomeTeamSize = ifelse(inglesa_final$HomeTeam == "Arsenal" | inglesa_final$HomeTeam == "Liverpool" | inglesa_final$HomeTeam == "Man United", "Grande", ifelse(inglesa_final$HomeTeam == "Aston Villa" | inglesa_final$HomeTeam == "Chelsea" | inglesa_final$HomeTeam == "Everton" | inglesa_final$HomeTeam == "Man City", "Mediano", "Pequeño"))
inglesa_final$AwayTeamSize = ifelse(inglesa_final$AwayTeam == "Arsenal" | inglesa_final$AwayTeam == "Liverpool" | inglesa_final$AwayTeam == "Man United", "Grande", ifelse(inglesa_final$AwayTeam == "Aston Villa" | inglesa_final$AwayTeam == "Chelsea" | inglesa_final$AwayTeam == "Everton" | inglesa_final$AwayTeam == "Man City", "Mediano", "Pequeño"))
knitr::opts_chunk$set(echo = TRUE)
library(readr)
library(readxl)
library(reshape2)
library(dplyr)
library(e1071)
library(Hmisc)
library(inspectdf)
library(funModeling)
library(VIM)
library(stringr)
library(xtable)
library(ggplot2)
library(directlabels)
library(scales)
library(ggthemes)
library(mice)
library(BBmisc)
library(tidyverse)
library(DT)
library(kableExtra)
descriptivas<- function(x){data.frame("MEDIDA"=c("Observaciones", "Mínimo", "1er Q", "Media", "Mediana", "Desv Est", "3er Q", "Máximo", "Asimetría", "Curtosis", "atípico leve<", "atípico leve>","atípico extremo<","atípico extremo>", "Err Est Media", "IC(95%) Media Up", "IC(95%) Media Down"),"VALOR"=format(c(length(na.omit(x)), min(na.omit(x)), quantile(na.omit(x), prob=0.25), mean(na.omit(x)), median(na.omit(x)), sd(na.omit(x)), quantile(na.omit(x), prob=0.75), max(na.omit(x)), skewness(na.omit(x)), kurtosis(na.omit(x)), (2.5*quantile(na.omit(x),prob=0.25)-1.5*quantile(na.omit(x), prob=0.75)),(2.5*quantile(na.omit(x),prob=0.75)-1.5*quantile(na.omit(x), prob=0.25)),(4*quantile(na.omit(x),prob=0.25)-3*quantile(na.omit(x), prob=0.75)),(4*quantile(na.omit(x),prob=0.75)-3*quantile(na.omit(x), prob=0.25)), ((sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))+1.96*(sd(na.omit(x))/sqrt(length(na.omit(x))))), (mean(na.omit(x))-1.96*((sd(na.omit(x))/sqrt(length(na.omit(x))))))), scientific = F))}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS
descriptivas2<-function(Continua,Categorías){
x1=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){length(na.omit(x))})
names(x1)=c("Categoría","Obs")
x2=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){min(na.omit(x))})
names(x2)=c("Categoría","Mínimo")
x3=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.25)})
names(x3)=c("Categoría","1er Q")
x4=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){median(na.omit(x))})
names(x4)=c("Categoría","Mediana")
x5=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){mean(na.omit(x))})
names(x5)=c("Categoría","Media")
x6=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){quantile(na.omit(x), prob =0.75)})
names(x6)=c("Categoría","3er Q")
x7=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){max(na.omit(x))})
names(x7)=c("Categoría","Máximo")
x8=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){sd(na.omit(x))})
names(x8)=c("Categoría","Desv Est")
x9=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){skewness(na.omit(x))})
names(x9)=c("Categoría","Asimetría")
x10=aggregate.data.frame(Continua, by=list(Categorías), FUN=function(x){kurtosis(na.omit(x))})
names(x10)=c("Categoría","Curtosis")
cbind(x1,x2,x3,x4,x5,x6,x7,x8,x9,x10)[,-seq(3,19,2)]
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VARIABLES CONTINUAS EN SUBMUESTRAS
tabla_freq<- function(x,total=1,na="ifany"){
if (total==1) {
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",sum(M$`Freq. Abs.`),sum(M$`Freq. Rel.`))
M$`Freq. Rel.`=as.numeric(M$`Freq. Rel.`)
M$`Freq. Abs.`=as.numeric(M$`Freq. Abs.`)
M
} else{
M=data.frame("Categoría"=table(x, useNA = na), "Rel"=prop.table(table(x,useNA = na)))[,-3]
names(M)=c("Categoría","Freq. Abs.","Freq. Rel.")
M
}
}
#FUNCIÓN PARA ESTADÍSTICAS DESCRIPTIVAS PARA VAR DISCRETAS
tabla_freq2<-function(x,y,na="ifany",prop=0, suma=c("filas","col")){
if (prop==0) {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
M
} else if (prop==1 & suma=="filas") {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 2:ncol(M)) {
M[,i]=M[,i]/M[,ncol(M)]
}
M
} else {
M=as.data.frame.matrix(table(x, y, useNA = na))
M$Categoría=row.names(M)
rownames(M)=NULL
M=M[,c(ncol(M),1:ncol(M)-1)]
M$Categoría=as.character(M$Categoría)
M[nrow(M)+1,]=c("Total",colSums(M[,2:ncol(M)]))
M[,2:ncol(M)]=sapply(M[,2:ncol(M)], as.numeric)
M$Total=rowSums(M[,2:ncol(M)])
for (i in 1:nrow(M)) {
M[i,2:ncol(M)]=M[i,2:ncol(M)]/M[nrow(M),2:ncol(M)]
}
M
}
}
#CARGUE DE LAS BASES DE DATOS
inglesa_1 = read_excel("Inglesa.xlsx", sheet = "18-19")
inglesa_2 = read_excel("Inglesa.xlsx", sheet = "19-20")
inglesa_3 = read_excel("Inglesa.xlsx", sheet = "20-21")
#CREAR TABLA DE LAS VARIABLES
variables <- read_excel("Variables.xlsx")
variables %>%
kbl() %>%
kable_styling()
# REESTRUCTURACIÓN Y UNIÓN DE LAS BASES DE DATOS
inglesa_aux = rbind(inglesa_2, inglesa_3)
inglesa_final = full_join(inglesa_aux, inglesa_1)
# FILTRACIÓN POR COLUMNAS DE INTERÉS
inglesa_final = inglesa_final[ , c(2, 4:11, 15:24)]
#Revisa duplicados
tabla_freq(duplicated(inglesa_final)) %>%
kbl() %>%
kable_styling()
#Elimina duplicados
inglesa_final = inglesa_final[!duplicated(inglesa_final),]
#Revisa tipo de variable
str(inglesa_final) %>%
kbl() %>%
kable_styling()
inglesa_final$Date = as.Date(inglesa_final$Date, format="%d-%m-%y")
capture.output(aggr(inglesa_final, numbers=T, prop=F,sortVars = T,cex.axis = 0.7), file=tempfile())
summary(inglesa_final$Date)
#Revisar anomalías
tabla_freq(inglesa_final$HomeTeam)
#Eliminar campo nulo
inglesa_final = inglesa_final[!is.na(inglesa_final$HomeTeam),]
tabla_freq(inglesa_final$AwayTeam)
# Resumen de la variable
summary(inglesa_final$FTHG)
# Gráfica de bigotes
boxplot(inglesa_final$FTHG)
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTHG = inglesa_final[(inglesa_final$FTHG == 33 | inglesa_final$FTHG < 0 | is.na(inglesa_final$FTHG)),]
# Imputando datos con base en medios oficiales
inglesa_final$FTHG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Crystal Palace" & inglesa_final$Date=="2020-10-18"]= 1
inglesa_final$FTHG[inglesa_final$HomeTeam=="West Brom" & inglesa_final$Date=="2021-01-30"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Southampton" & inglesa_final$Date=="2021-05-11"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Cardiff" & inglesa_final$Date=="2018-09-02"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Watford" & inglesa_final$Date=="2018-09-02"]= 2
inglesa_final$FTHG[inglesa_final$HomeTeam=="Bournemouth" & inglesa_final$Date=="2018-09-15"]= 4
# Resumen de la variable
summary(inglesa_final$FTAG)
# Gráfica de bigotes
boxplot(inglesa_final$FTAG)
# Guardamos los anómalos en un dataframe para analizarlos mejor
anomalos_FTAG = inglesa_final[(inglesa_final$FTAG == 27 | inglesa_final$FTAG < 0 | is.na(inglesa_final$FTAG)),]
# Imputando datos con base en medios oficiales
inglesa_final$FTAG[inglesa_final$HomeTeam=="Liverpool" & inglesa_final$Date=="2019-10-27"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="Sheffield United" & inglesa_final$Date=="2019-12-05"]= 2
inglesa_final$FTAG[inglesa_final$HomeTeam=="Crystal Palace" & inglesa_final$Date=="2020-10-18"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="West Brom" & inglesa_final$Date=="2021-01-30"]= 2
inglesa_final$FTAG[inglesa_final$HomeTeam=="Cardiff" & inglesa_final$Date=="2018-09-02"]= 3
inglesa_final$FTAG[inglesa_final$HomeTeam=="Watford" & inglesa_final$Date=="2018-09-02"]= 1
inglesa_final$FTAG[inglesa_final$HomeTeam=="Bournemouth" & inglesa_final$Date=="2018-09-15"]= 2
tabla_freq(inglesa_final$FTR) %>%
kbl() %>%
kable_styling()
# SE RECALCULA DE NUEVO LA VARIABLE
inglesa_final$FTR = ifelse((inglesa_final$FTHG > inglesa_final$FTAG), "H", ifelse((inglesa_final$FTHG < inglesa_final$FTAG), "A", "D"));
summary(inglesa_final$HTHG)
summary(inglesa_final$HTAG)
tabla_freq(inglesa_final$HTR) %>%
kbl() %>%
kable_styling()
# SE RECALCULA DE NUEVO LA VARIABLE
inglesa_final$HTR = ifelse((inglesa_final$HTHG > inglesa_final$HTAG), "H", ifelse((inglesa_final$HTHG < inglesa_final$HTAG), "A", "D"));
summary(inglesa_final$HST)
anomalias_HST = inglesa_final[(is.na(inglesa_final$HST)),]
inglesa_final = inglesa_final[!(is.na(inglesa_final$HST)),]
summary(inglesa_final$AST)
summary(inglesa_final$HF)
summary(inglesa_final$AF)
summary(inglesa_final$HC)
summary(inglesa_final$AC)
summary(inglesa_final$HY)
summary(inglesa_final$AY)
summary(inglesa_final$HR)
summary(inglesa_final$AR)
capture.output(aggr(inglesa_final, numbers=T, prop=F,sortVars = T,cex.axis = 0.7), file=tempfile())
inglesa_final$Pandemic = ifelse((inglesa_final$Date > "2020-03-11" & inglesa_final$Date < "2020-12-02") , "Puerta cerrada", ifelse((inglesa_final$Date >= "2020-12-11" & inglesa_final$Date < "2021-07-19"), "Aforo limitado", "Sin restricciones"))
tabla_freq(inglesa_final$Pandemic) %>%
kbl() %>%
kable_styling()
inglesa_final$HomeTeamSize = ifelse(inglesa_final$HomeTeam == "Arsenal" | inglesa_final$HomeTeam == "Liverpool" | inglesa_final$HomeTeam == "Man United", "Grande", ifelse(inglesa_final$HomeTeam == "Aston Villa" | inglesa_final$HomeTeam == "Chelsea" | inglesa_final$HomeTeam == "Everton" | inglesa_final$HomeTeam == "Man City", "Mediano", "Pequeño"))
inglesa_final$AwayTeamSize = ifelse(inglesa_final$AwayTeam == "Arsenal" | inglesa_final$AwayTeam == "Liverpool" | inglesa_final$AwayTeam == "Man United", "Grande", ifelse(inglesa_final$AwayTeam == "Aston Villa" | inglesa_final$AwayTeam == "Chelsea" | inglesa_final$AwayTeam == "Everton" | inglesa_final$AwayTeam == "Man City", "Mediano", "Pequeño"))
Variables_Nuevas <- read_excel("Variables Nuevas.xlsx")
Variables_Nuevas %>%
kbl() %>%
kable_styling()
save(inglesa_final, file="base_datos_inglesa_final.RData")
